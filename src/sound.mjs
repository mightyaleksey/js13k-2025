/* @flow */

import nullthrows from './libs/nullthrows.mjs'
import { zzfx, zzfxP } from './libs/zzfxm/zzfx.mjs'
import { zzfxM } from './libs/zzfxm/zzfxm.min.mjs'

type SoundType = 'fall' | 'match'

const _music = { buffer: null, current: null }
const _soundBank: { [SoundType]: Array<mixed> } = {}

export async function initSoundBank () {
  /* eslint-disable no-sparse-arrays */
  // prettier-ignore
  _soundBank.fall = [2.1,, 454,, 0.02, 0.06, 2, 3.8, -8,,,,, 1.1,, 0.2, 0.12, 0.85, 0.02]
  // prettier-ignore
  _soundBank.match = [,, 18, 0.01, 0.01, 0.03,, 2.7, 43,,,,, 0.1,,,, 0.65, 0.01, 0.17, -1423]

  // prettier-ignore
  _music.buffer = await _renderSond([[[1.8, 0, 72,,, 0.2,, 4, -2, 6, 50, 0.15,, 6], [, 0, 655,,, 0.09, 3, 1.65,,,,, 0.02, 3.8, -0.1,, 0.2], [1.2, 0, 23,,, 0.2, 3, 4,,, 3, 0.9, 0.05], [1.5, 0, 740,,, 0.15, 2, 0.2, -0.1, -0.15, 9, 0.02,, 0.1, 0.12,, 0.06]], [[[3, -1, 13, 13, 13, 8, 13,,,,,,,,,,,, 11, 11, 11, 6, 11,,,,,,,,,,,, 10, 10, 10, 6, 10,,,,,,,,, 6, 8, 10, 8, 8, 8, 5, 13,, 8, 8, 8, 5, 13,,,,,,], [, 1, 25,, 25,,,,,,,,,,,,, 25, 25,, 25,,,,,,, 25,,, 25,, 25, 25, 25,, 25,,,,,,,,,,, 25, 25, 25, 25,, 25,,,,,,,,,,,,,,], [2, -1, 13,, 25,, 13, 13, 25, 13,, 13, 25, 13, 13, 13, 25,, 13,, 25,, 13, 13, 25, 13,, 13, 25, 13, 13, 13,,, 13,, 25,, 13, 13, 25, 13,, 13, 25, 13, 13, 13, 25,, 13,, 25,, 13, 13, 25, 13,, 13, 25, 13, 13, 13, 25,,]], [[3, -1, 13, 13, 13, 8, 13,,,,,,,,,,,, 11, 11, 11, 6, 11,,,,,,,,,,,, 10, 10, 10, 6, 10,,,,,,,,, 6, 8, 10, 8, 8, 8, 5, 13,, 8, 8, 8, 5, 13, 8, 8, 8, 5, 13], [2, -1, 13,, 25,, 13, 13, 25, 13,, 13, 25, 13, 13, 13, 25, 27, 11,, 23,, 11, 11, 23, 11,, 11, 23, 11, 11, 11, 23, 22, 18,, 30,, 18, 18, 30, 18,, 18, 30, 18, 18, 18, 30, 22, 13,, 25,, 13, 13, 25, 13,, 13, 25, 13, 13, 13, 25,,], [, 1, 25,, 25,,,,,,,,,,,,, 25, 25,, 25,,,,,,,,,,,,,, 25,, 25,,,,,,,,,,, 25, 25, 25, 25,, 25,,,,,,,,,,,,,,], [1, 1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, 13, 13, 13, 13, 13, 13, 13, 13]], [[3, -1, 13, 13, 13, 8, 13,, 13, 15, 17, 17, 15, 13, 20, 20, 18, 17, 18,,,, 17,, 15,,,, 17,, 18,, 22, 22, 22,, 18,,,, 25, 25, 25,, 22,,, 18, 20, 22, 20,,,,,,,,,,,,,,,,], [2, -1, 13,, 25,, 13, 13, 25, 13,, 13, 25, 13, 13, 13, 25, 27, 11,, 23,, 11, 11, 23, 11,, 11, 23, 11, 11, 11, 23, 22, 18,, 30,, 18, 18, 30, 18,, 18, 30, 18, 18, 18, 30, 22, 13,, 25,, 13, 13, 25, 13,, 13, 25, 13, 13, 13, 25,,], [, 1, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,,], [1, 1,,,,, 13,,,,,,,, 13,,,,,,,, 13,,,,,,,, 13,, 13,,,,,, 13,,,,,,,, 13,,,,,,,, 13,,,,,,,, 13, 13,, 13]], [[3, -1, 13,, 25,, 13, 13, 25, 13,, 13, 25, 13, 13, 13, 25,, 11,, 23,, 11, 11, 23, 11,, 11, 23, 11, 11, 11, 23,, 10,, 22,, 10, 10, 22, 10,, 10, 22, 10, 10, 6, 8, 10, 20, 25, 20, 20, 25, 20,, 20, 25, 20, 20, 20, 25,, 20,,], [2, -1, 13,, 25,, 13, 13, 25, 13,, 13, 25, 13, 13, 13, 25,, 13,, 25,, 13, 13, 25, 13,, 13, 25, 13, 13, 13, 25,, 13,, 25,, 13, 13, 25, 13,, 13, 25, 13, 13, 13, 25,, 13,, 25,, 13, 13, 25, 13,, 13, 25, 13, 13, 13, 25,,], [, 1, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,,], [1, 1,,,,, 13,,,,,,,, 13,,,,,,,, 13,,,,,,,, 13,, 13,,,,,, 13,,,,,,,, 13,,,,,,,, 13,,,,,,,, 13, 13,, 13]], [[3, -1, 13,,,,,, 8,, 17, 15, 13,, 17, 15, 13,, 15,,,, 10, 13, 15, 10, 13, 15, 10, 13, 15, 10, 13, 15, 12,,,,,, 8, 15,,,,, 17, 15, 13, 8, 13,,,,,, 10, 8,, 20, 20, 20, 20, 20, 20, 20], [2, -1, 13,, 25,, 13, 13, 25, 13,, 13, 25, 13, 13, 13, 25,, 15,, 27,, 15, 15, 27, 15,, 15, 27, 15, 15, 15, 27, 32, 20,, 32,, 20, 20, 32, 20,, 20, 32, 20, 20, 20, 32,, 13,, 25,, 13, 13, 25, 20,, 20, 32, 20, 20, 20, 32,,], [, 1, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,,], [1, 1,,,,, 13,,,,,,,, 13,,,,,,,, 13,,,,,,,, 13,, 13,,,,,, 13,,,,,,,, 13,,,,,,,, 13,,,,,,,, 13, 13,, 13]], [[3, -1, 13,,,,,, 8,, 17,,,, 18, 17, 15,, 18,,,, 13,,,, 10,,,, 6,,,, 8, 12, 15, 12, 20,, 8, 12, 15, 12, 20,, 22, 20, 15,, 13,,,,,, 10,, 8,,,,, 8, 20, 8], [2, -1, 13,, 25, 25, 13,, 25, 25, 13,, 25, 25, 13,, 25, 25, 15,, 27, 27, 15,, 27, 27, 15,, 27, 27, 15,, 27, 27, 20,, 32, 32, 20,, 32, 32, 20,, 32, 32, 20,, 32, 32, 13,, 25, 25, 13,, 25, 25, 20,, 32, 32, 20,, 32, 34], [, 1, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,,], [1, 1,,,,, 13,,,,,,,, 13,,,,,,,, 13,,,,,,,, 13,, 13,,,,,, 13,,,,,,,, 13,,,,,,,, 13,,,,,,,, 13, 13,, 13]], [[3, -1, 13,,,,,, 8,, 17,,,, 18, 17, 15,, 18,,,, 13,,,, 10,,,, 6,,,, 8, 12, 15, 12, 20,, 8, 12, 15, 12, 20,, 22, 20, 15,, 13,,,,,, 10,, 8,,,,, 8, 20, 8], [, 1, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,,], [1, 1,,,,, 13,,,,,,,, 13,,,,,,,, 13,,,,,,,, 13,, 13,,,,,, 13,,,,,,,, 13,,,,,,,, 13,,,,,,,, 13, 13,, 13]], [[, 1, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,,,, 25, 25,, 25, 25,,,,,, 25,,,, 25,,, 25,,,, 25, 25, 25, 25, 25], [1, 1,,,,, 13,,,,,,,, 13,,,,,,,, 13,,,,,,,, 13,, 13,,,,,, 13,,,,,,,, 13,,,,,,,, 13, 13,, 13,, 13, 13, 13, 13, 13, 13, 13]]], [0, 1, 2, 2, 3, 3, 2, 2, 4, 4, 5, 6, 6, 7, 2, 2, 3]])
  /* eslint-enable no-sparse-arrays */
}

export function playSound (name: SoundType) {
  const sound = nullthrows(_soundBank[name])
  zzfx(...sound)
}

export function playMusic () {
  if (_music.current == null) {
    _music.current = zzfxP(..._music.buffer)
    _music.current.loop = true
  }
}

function _renderSond (song: Array<mixed>): Promise<empty> {
  return new Promise((resolve) => {
    setTimeout(() => resolve(zzfxM(...song)), 20)
  })
}
